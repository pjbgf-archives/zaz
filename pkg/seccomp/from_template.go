package seccomp

import specs "github.com/opencontainers/runtime-spec/specs-go"

// ProfileTemplate represents a type for seccomp templates.
type ProfileTemplate string

const (
	// WebTemplate represents a seccomp profile for web applications.
	WebTemplate ProfileTemplate = "web"
)

// SyscallsFromTemplate represents a template with pre-defined syscalls.
type SyscallsFromTemplate struct {
	name   ProfileTemplate
	action specs.LinuxSeccompAction
}

// NewSyscallsFromTemplate initialises and returns a new SyscallsFromTemplate
func NewSyscallsFromTemplate(name ProfileTemplate) *SyscallsFromTemplate {
	return &SyscallsFromTemplate{
		name:   name,
		action: specs.ActAllow,
	}
}

// GetSystemCalls returns all system calls from a pre-defined template.
func (s *SyscallsFromTemplate) GetSystemCalls() (*specs.LinuxSyscall, error) {
	var syscalls []string
	switch s.name {
	case WebTemplate:
		syscalls = webTemplateSyscalls
	default:
		return nil, ErrInvalidTemplateName
	}

	r := specs.LinuxSyscall{
		Action: s.action,
		Names:  syscalls,
	}

	return &r, nil
}

// Generic template for web applications.
var webTemplateSyscalls = []string{
	"accept",
	"accept4",
	"access",
	"arch_prctl",
	"bind",
	"brk",
	"chdir",
	"clock_getres",
	"clock_gettime",
	"clock_nanosleep",
	"clone",
	"close",
	"connect",
	"copy_file_range",
	"creat",
	"dup",
	"dup2",
	"dup3",
	"epoll_create",
	"epoll_create1",
	"epoll_ctl",
	"epoll_pwait",
	"epoll_wait",
	"eventfd",
	"eventfd2",
	"execve",
	"execveat",
	"exit",
	"exit_group",
	"faccessat",
	"fadvise64",
	"fallocate",
	"fanotify_init",
	"fanotify_mark",
	"fchdir",
	"fcntl",
	"fdatasync",
	"flock",
	"fork",
	"fsconfig",
	"fsopen",
	"fstat",
	"fsync",
	"ftruncate",
	"futex",
	"getcpu",
	"getcwd",
	"getdents",
	"getdents64",
	"getegid",
	"geteuid",
	"getgid",
	"getgroups",
	"getitimer",
	"getpeername",
	"getpgid",
	"getpgrp",
	"getpid",
	"getppid",
	"getpriority",
	"getrandom",
	"getresgid",
	"getresuid",
	"getrlimit",
	"getrusage",
	"getsid",
	"getsockname",
	"getsockopt",
	"get_thread_area",
	"gettid",
	"gettimeofday",
	"getuid",
	"getxattr",
	"inotify_add_watch",
	"inotify_init",
	"inotify_init1",
	"inotify_rm_watch",
	"io_cancel",
	"ioctl",
	"io_destroy",
	"io_getevents",
	"io_pgetevents",
	"io_setup",
	"io_submit",
	"io_uring_enter",
	"io_uring_register",
	"io_uring_setup",
	"kill",
	"listen",
	"lseek",
	"lstat",
	"madvise",
	"membarrier",
	"memfd_create",
	"migrate_pages",
	"mkdir",
	"mkdirat",
	"mlock",
	"mlock2",
	"mlockall",
	"mmap",
	"mprotect",
	"nanosleep",
	"newfstatat",
	"open",
	"openat",
	"pause",
	"pipe",
	"pipe2",
	"poll",
	"ppoll",
	"prctl",
	"pread64",
	"preadv",
	"preadv2",
	"prlimit64",
	"pwrite64",
	"pwritev",
	"pwritev2",
	"read",
	"readahead",
	"readlink",
	"readlinkat",
	"readv",
	"recvfrom",
	"recvmmsg",
	"recvmsg",
	"rt_sigaction",
	"rt_sigpending",
	"rt_sigprocmask",
	"rt_sigqueueinfo",
	"rt_sigreturn",
	"rt_sigsuspend",
	"rt_sigtimedwait",
	"rt_tgsigqueueinfo",
	"sched_getaffinity",
	"sched_getattr",
	"sched_getparam",
	"sched_get_priority_max",
	"sched_get_priority_min",
	"sched_getscheduler",
	"sched_rr_get_interval",
	"sched_setaffinity",
	"sched_setattr",
	"sched_setparam",
	"sched_setscheduler",
	"sched_yield",
	"setgid",
	"setitimer",
	"setsid",
	"setsockopt",
	"set_thread_area",
	"set_tid_address",
	"setuid",
	"sigaltstack",
	"signalfd",
	"signalfd4",
	"socket",
	"socketpair",
	"stat",
	"statfs",
	"statx",
	"sync",
	"sync_file_range",
	"tee",
	"time",
	"times",
	"truncate",
	"umask",
	"uname",
	"vfork",
	"wait3",
	"wait4",
	"waitid",
	"write",
	"writev",
}
